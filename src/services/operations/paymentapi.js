import { apiConnector } from "../apiConnector";
import { paymentEndpoints } from "../apis"
import toast from "react-hot-toast";
import { setOrderItems } from "../../slices/orderSlice";
import { getOrders } from "./profileapi";
// import { setPaymentLoading } from "../../slices/productSlice";

const {capturePayment_api,verifySignature_api,sendEmailSucc_api}= paymentEndpoints

function loadScript(src) {
    return new Promise((resolve) => {
        const script = document.createElement("script");
        script.src = src;

        script.onload = () => {
            resolve(true);
        }
        script.onerror= () =>{
            resolve(false);
        }
        document.body.appendChild(script);
    })
}

export const buyProduct= async(token, prod_ids,userDetails,navigate,dispatch)=>{
    // const toastId = toast.loading("Loading...");
    // dispatch(setPaymentLoading(true))
    try{
        // load script
        const res = await loadScript("https://checkout.razorpay.com/v1/checkout.js");

        if(!res) {
            toast.error("RazorPay SDK failed to load");
            return;
        }
        // initiate payment (create order)
       //console.log("prod id at frontend ",prod_ids);

        const orderResponse= await apiConnector("POST", capturePayment_api,
             {prod_ids},{ Authorization: `Bearer ${token}`})

        console.log("create order api response ",orderResponse);
        
        if(!orderResponse.data.success) {
            throw new Error(orderResponse.data.message);
        }
        console.log("initiate/create order api response", orderResponse); 


        //options- The options object contains all the necessary configuration details that the Razorpay checkout needs to initialize the payment. 
        const options = {
            key: process.env.RAZORPAY_KEY, // Your Razorpay API key, required to authenticate the transaction.
            currency: orderResponse.data.data.currency,
            amount: `${orderResponse.data.data.amount}`,
            order_id:orderResponse.data.data.id, // The unique order ID generated by your backend.
            name:"Kala Mandir", // Your business name, which appears on the checkout page.
            description: "Thank You for purchasing the item", // A description of the transaction.
            // image:rzpLogo,
            prefill: {
                name:`${userDetails.firstName}`, // Prefilled user name to make the checkout process faster.
                email:userDetails.email
            },
            handler: async function(response) { // Callback function that is called after the payment is successful.
                //send successful/payment received  mail
                await sendPaymentReceivedEmail(response, orderResponse.data.data.amount,token );
                //verify signature
                await verifySignature({...response, prod_ids}, token, navigate, dispatch);
            }
        }
       
        // opens razorpay payment gateway
        const paymentObject = new window.Razorpay(options); // new instance of the Razorpay payment gateway using the configuration specified in the options object. 
        paymentObject.open();
        paymentObject.on("payment.failed", function(response) {
            toast.error("Oops, payment failed");
            console.log(response.error);
        })
        
    }
    catch(err){
        console.log("create order payment api error ",err);
        toast.error(err);
    }
    // toast.dismiss(toastId);
    // dispatch(setPaymentLoading(false));
}


// send payment success / received mail
async function sendPaymentReceivedEmail(response,amount,token){
    try{
        console.log("before in frontend...")
       const res= await apiConnector("POST", sendEmailSucc_api,
            {
             orderId: response.razorpay_order_id,
             paymentId: response.razorpay_payment_id,
             amount
            },
            {Authorization: `Bearer ${token}`}
        )
        console.log("after in frontend...")
        console.log("payment received/success mail ",res);
        if(!res.data.success) {
            throw new Error(res.data.message);
        }
    }
    catch(err){
        console.log("sending payment received email api error ",err);
        toast.error(err);
    }
}


// verify signature
async function verifySignature(bodyData, token, navigate, dispatch){
    // const toastId = toast.loading("Verifying Payment....");
    // dispatch(setPaymentLoading(true));
    try{
        console.log("before api call ")
        const response = await apiConnector("POST",verifySignature_api,
            bodyData,{Authorization: `Bearer ${token}`}
        )
        console.log("verify signature api response ",response);
        if(!response.data.success) {
            throw new Error(response.data.message);
        }
        toast.success("Payment Successful, your order is confirmed");
        const res= await getOrders(token);
        console.log("after payment succ fetching orders might be error of response ",res);
            if( res){
                const allOrderItems = [];
                res.forEach(order => {
                    order.items.forEach(item => {
                        console.log("product going in dispatch order ",item.product.name);
                        allOrderItems.push(item);  // product populate kia hua hai 
                    });
                  });
                  dispatch(setOrderItems(allOrderItems));
            }
            console.log("after dispatching order items");
        navigate("/orders");
        //dispatch(resetCart());
    }   
    catch(error) {
        console.log("verify signature api error ", error);
        toast.error("Could not verify Payment");
    }
    // toast.dismiss(toastId);
    // dispatch(setPaymentLoading(false));
}

// add order in user model        added these fn in verifySignature backend fn
// send order confirmation mail